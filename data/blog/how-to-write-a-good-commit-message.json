{
  "slug": "how-to-write-a-good-commit-message",
  "name": "Mastering Git Commit Messages: A 10x Developer's Guide",
  "date": "September 02, 2024",
  "readingTime": "~ 7 min read",
  "author": "AI Assistant",
  "description": "Ever stared at a Git history full of vague messages like 'Fixed stuff' or 'Updated code'? Let's turn that mess into a masterpiece! This guide will show you how to craft Git commit messages that'll make your team actually want to read the commit history.",
  "image": "/git-commit-hero.png",
  "url": "localhost:3000/blog/mastering-git-commit-messages",
  "content": [
    {
      "type": "paragraph",
      "text": "Ever stared at a Git history full of vague messages like 'Fixed stuff' or 'Updated code'? Let's turn that mess into a masterpiece! This guide will show you how to craft Git commit messages that'll make your team actually want to read the commit history."
    },
    {
      "type": "heading",
      "level": 2,
      "text": "Why Bother with Good Commit Messages?"
    },
    {
      "type": "paragraph",
      "text": "Before we dive into the 'how', let's talk about the 'why'. Good commit messages are like breadcrumbs in the forest of your code:"
    },
    {
      "type": "list",
      "items": [
        "They help you retrace your steps when you're lost in a bug hunt.",
        "They give context to your teammates (or future you) about why changes were made.",
        "They make code reviews smoother than a freshly waxed surfboard.",
        "They can save time when you're trying to understand why a particular line of code exists."
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": "The Anatomy of a Great Commit Message"
    },
    {
      "type": "paragraph",
      "text": "A well-structured commit message typically looks like this:"
    },
    {
      "type": "code",
      "language": "text",
      "content": "<type>(<scope>): <subject>\n\n<body>\n\n<footer>"
    },
    {
      "type": "paragraph",
      "text": "Let's break it down:"
    },
    {
      "type": "list",
      "items": [
        "Type: What kind of change is this? (e.g., feat, fix, docs, style, refactor, test, chore)",
        "Scope: What area of the project is affected? (optional)",
        "Subject: A brief, imperative mood description of the change",
        "Body: More detailed explanation of the what and why (not the how)",
        "Footer: Any breaking changes or issues closed by this commit"
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": "The 7 Commandments of Commit Messages"
    },
    {
      "type": "paragraph",
      "text": "Follow these rules, and your commit messages will shine brighter than a supernova:"
    },
    {
      "type": "list",
      "items": [
        "1. Use the imperative mood in the subject line (e.g., 'Add' not 'Added')",
        "2. Capitalize the subject line",
        "3. Don't end the subject line with a period",
        "4. Keep the subject line under 50 characters",
        "5. Wrap the body at 72 characters",
        "6. Use the body to explain the what and why, not the how",
        "7. Separate subject from body with a blank line"
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": "Examples: The Good, the Bad, and the Ugly"
    },
    {
      "type": "paragraph",
      "text": "Let's look at some examples to see these principles in action:"
    },
    {
      "type": "code",
      "language": "text",
      "content": "# The Ugly\nfixed bug\n\n# The Bad\nAdded new feature for user authentication.\n\n# The Good\nfeat(auth): Implement JWT-based user authentication\n\nAdd JSON Web Token (JWT) authentication to secure API routes.\nThis change:\n- Generates JWTs upon successful login\n- Validates JWTs on protected routes\n- Refreshes tokens to maintain user sessions\n\nCloses #123"
    },
    {
      "type": "heading",
      "level": 2,
      "text": "Tools to Help You Commit Like a Pro"
    },
    {
      "type": "paragraph",
      "text": "Don't worry, you don't have to remember all this on your own. These tools can help:"
    },
    {
      "type": "list",
      "items": [
        "Commitizen: A command line tool that guides you through creating the perfect commit message.",
        "commitlint: Lints your commit messages to ensure they follow the conventions.",
        "husky: Sets up Git hooks to run checks (like commitlint) before each commit."
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": "Wrapping Up"
    },
    {
      "type": "paragraph",
      "text": "Remember, great commit messages are an act of kindness to your future self and your team. They turn your Git history from a confusing mess into a clear story of your project's evolution. So next time you're about to commit with a message like 'Fixed stuff', take a deep breath, think about your future self, and craft a commit message that would make a Git guru proud!"
    },
    {
      "type": "paragraph",
      "text": "Now go forth and commit like the 10x developer you are!"
    }
  ]
}