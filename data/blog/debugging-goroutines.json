{
    "slug": "debugging-goroutines",
    "name": "Debugging Goroutines: How to debug like a pro",
    "date": "August 17, 2024",
    "readingTime": "· 8 min",
    "author": "Christian Ludovic",
    "description": "As a software engineer, there comes a time when you encounter a problem that a single thread or process might not be enough.",
    "image" : "/post.png",
    "content": [
      {
        "type": "paragraph",
        "text": "As a software engineer, there comes a time when you encounter a problem that a single thread or process might not be enough. So you decide to solve it with multi-threading, or in Go’s case, goroutines. Although, Go makes it easier to create concurrent programs compared to other languages, debugging them is still a big pain. In this post, we will explore a tool that can help us debug them, called Delve debugger"
      },
      {
        "type": "heading",
        "level": 2,
        "text": "Debugging with print statements (the ugly way)"
      },
      {
        "type": "paragraph",
        "text": "Before exploring the Delve debugger, let’s see how most of us debug programs. Let us see the printf debugging technique. For example, let’s assume the following simple Go program, which divides two numbers and prints them to the standard output."
      },

      {
        "type": "code",
        "language": "go",
        "content": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc divide(a, b int) int {\n\treturn a / b\n}\n\nfunc main() {\n\ta := 10\n\tb := 0\n\tresult := divide(a, b)\n\tfmt.Println(result)\n}"
      },

      {
        "type": "paragraph",
        "text": "When we run the program it will print the following output:"
      },

      {
        "type": "code",
        "language": "text",
        "content": "panic: runtime error: integer divide by zero\n\ngoroutine 1 [running]:\nmain.divide(0x0, 0x0)\n\t/Users/christianludovic/debug.go:8 +0x3d\nmain.main()\n\t/Users/christianludovic/debug.go:13 +0x2d\nexit status 2"
      },

      {
        "type": "paragraph",
        "text": "The program panics because we are trying to divide by zero. To debug this, we can add print statements to see the values of a and b before the division operation."
      },

      {
        "type": "code",
        "language": "go",
        "content": "func divide(a, b int) int {\n\tfmt.Printf(\"a: %d, b: %d\\n\", a, b)\n\treturn a / b\n}"
      },

      {
        "type": "paragraph",
        "text": "When we run the program again, it will print the following output:"
      },

      {
        "type": "code",
        "language": "text",
        "content": "a: 10, b: 0\npanic: runtime error: integer divide by zero\n\ngoroutine 1 [running]:\nmain.divide(0x0, 0x0)\n\t/Users/christianludovic/debug.go:8 +0x3d\nmain.main()\n\t/Users/christianludovic/debug.go:13 +0x2d\nexit status 2"
      },

      {
        "type": "paragraph",
        "text": "We can see that the program panics because we are trying to divide by zero. This is a simple example, but in a real-world scenario, debugging with print statements can be a nightmare. This is where the Delve debugger comes in."  
      },

      {
        "type": "paragraph",
        "text": "This will install the Delve debugger on your system. To check if Delve is installed correctly, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "dlv version"
      },

      {
        "type": "paragraph",
        "text": "This will print the version of Delve installed on your system. Now let’s see how to debug the previous program with Delve."
      },

      {
        "type": "heading",
        "level": 2,
        "text": "Debugging with Delve"
      },

      {
        "type": "paragraph",
        "text": "This will install the Delve debugger on your system. To check if Delve is installed correctly, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "dlv version"
      },

      {
        "type": "paragraph",
        "text": "This will print the version of Delve installed on your system. Now let’s see how to debug the previous program with Delve."
      },

      {
        "type": "paragraph",
        "text": "Delve is a debugger for the Go programming language. It allows you to inspect variables, set breakpoints, and step through your code. To install Delve, run the following command:"
      },

      {
        "type": "paragraph",
        "text": "This will install the Delve debugger on your system. To check if Delve is installed correctly, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "dlv version"
      },

      {
        "type": "paragraph",
        "text": "This will print the version of Delve installed on your system. Now let’s see how to debug the previous program with Delve."
      },

      {
        "type": "code",
        "language": "bash",
        "content": "go get -u github.com/go-delve/delve/cmd/dlv"
      },

      {
        "type": "paragraph",
        "text": "This will install the Delve debugger on your system. To check if Delve is installed correctly, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "dlv version"
      },

      {
        "type": "paragraph",
        "text": "This will print the version of Delve installed on your system. Now let’s see how to debug the previous program with Delve."
      },

      {
        "type": "paragraph",
        "text": "To debug the previous program with Delve, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "dlv debug"
      },

      {
        "type": "paragraph",
        "text": "This will start the Delve debugger and you will see the following output:"
      },

      {
        "type": "code",
        "language": "text",
        "content": "Type 'help' for list of commands.\n(dlv)"
      },

      {
        "type": "paragraph",
        "text": "To set a breakpoint at the divide function, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "break divide"
      },

      {
        "type": "paragraph",
        "text": "This will set a breakpoint at the divide function. To run the program, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "run"
      },

      {
        "type": "paragraph",
        "text": "This will run the program and stop at the breakpoint. To see the values of a and b, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "print a\nprint b"
      },

      {
        "type": "paragraph",
        "text": "This will print the values of a and b. To continue running the program, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "continue"
      },

      {
        "type": "paragraph",
        "text": "This will continue running the program until it finishes. This is just a simple example of how to use the Delve debugger. Delve has many more features that can help you debug your Go programs more effectively."
      },

      {
        "type": "code",
        "language": "bash",
        "content": "print a\nprint b"
      },

      {
        "type": "paragraph",
        "text": "This will print the values of a and b. To continue running the program, run the following command:"
      },

      {
        "type": "code",
        "language": "bash",
        "content": "continue"
      },

      {
        "type": "paragraph",
        "text": "This will continue running the program until it finishes. This is just a simple example of how to use the Delve debugger. Delve has many more features that can help you debug your Go programs more effectively."
      }
    ],
    "tags": ["Next.js", "Portfolio", "Web Development"]
  }